from aiogram import html, Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from pyexpat.errors import messages

from states.create_user import CreateUser, pilgrim
from db.database import SessionLocal, create_user
from states.login_user import LoginUser
from db.models import User

router = Router()


@router.message(CreateUser.username)
async def get_username(message: Message, state: FSMContext):
    if not message.text:
        await message.answer(
            '–Ø –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∏ –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ –∑–∞–¥–∞—á–µ,\n'
            '–Ω–æ —è –∂–¥—É –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º –∏–ª–∏ –ø—Ä–æ–∑–≤–∏—â–µ–º ü´Ç'
        )
    else:
        await state.update_data(username=message.text)
        await message.answer(f'–•–æ—Ä–æ—à–æ, —è –±—É–¥—É –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±—è {html.bold(message.text)}!')

        await message.answer(
            f'{html.bold("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")}\n\n'
            '–ú–Ω–µ –Ω—É–∂–Ω–∞ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n\n'
            f'–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {html.code(0)}'
        )
        await state.set_state(CreateUser.age)


@router.message(CreateUser.age)
async def get_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ üßÆ")
        return

    age = int(message.text)
    await state.update_data(age=age)

    await message.answer(f"–ó–∞–ø–æ–º–Ω–∏–ª! —Ç–µ–±–µ {age} –ª–µ—Ç.")
    await message.answer(
        f'{html.bold("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 9237835676")}\n\n'
        '–û–±–µ—â–∞—é –Ω–∏–∫–æ–≥–¥–∞ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—Å–∞—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä\n'
        '–û–Ω –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, —á—Ç–æ –±—ã —Ç—ã –º–æ–≥ –≤–æ–π—Ç–∏ —Å –ª—é–±–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º'
    )

    await state.set_state(CreateUser.phone)


@router.message(CreateUser.phone)
async def get_phone(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 9237835676')
        return

    phone = message.text
    await state.update_data(phone=phone)

    await message.answer(f"–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä: {phone}")
    await message.answer(
        '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏—è, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ!'
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞—é—Ç—Å—è \n\n'
        '–í–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
    )

    await state.set_state(CreateUser.interests)


@router.message(CreateUser.interests)
async def get_interests(message: Message, state: FSMContext):
    if not message.text:
        await message.answer('–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!')
        return

    # –†–∞–∑–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    interests = [i.strip() for i in message.text.lower().split(',') if i.strip()]
    await state.update_data(interests=interests)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –ª–æ–≥–∏–∫–∏)
    pilgrim['username'] = data['username']
    pilgrim['age'] = data['age']
    pilgrim['phone'] = data['phone']
    pilgrim['interests'] = data['interests']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db = SessionLocal()
    try:
        user = create_user(
            db,
            username=data['username'],
            age=data['age'],
            phone=data['phone'],
            interests=data['interests'],
            telegram_id=str(message.from_user.id)
        )
        await message.answer(
            '–°–ø–∞—Å–∏–±–æ! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º:\n\n'
            f'–¢—ã: {user.username}\n'
            f'–¢–µ–±–µ: {user.age}\n'
            f'–¢–≤–æ–π –Ω–æ–º–µ—Ä: {user.phone}\n'
            f'–ò–Ω—Ç–µ—Ä–µ—Å—ã: {", ".join(user.interests)}'
        )
    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}')
    finally:
        db.close()

    await state.clear()


@router.message(LoginUser.phone)
async def login_phone(message: Message, state: FSMContext):
    contact = message.contact

    phone = contact.phone_number.replace("+", "").lstrip("7")

    db = SessionLocal()
    user = db.query(User).filter(User.phone == phone).first()

    if user:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º telegram_id
        user.telegram_id = str(message.from_user.id)
        db.commit()
        await message.answer(
            f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}!\n"
            f"–¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user.interests)}"
        )
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    db.close()
    await state.clear()