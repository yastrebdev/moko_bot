import re
from datetime import datetime, date, timedelta

from aiogram import html, Router, types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from keyboards.timezone_keyboard import timezone_keyboard
from states.create_user import CreateUser

router = Router()


@router.message(CreateUser.username)
async def get_username(message: Message, state: FSMContext):
    if not message.text:
        await message.answer(
            '–Ø –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∏ –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ –∑–∞–¥–∞—á–µ,\n'
            '–Ω–æ —è –∂–¥—É –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º –∏–ª–∏ –ø—Ä–æ–∑–≤–∏—â–µ–º ü´Ç'
        )
    else:
        await state.update_data(username=message.text)
        await message.answer(f'–•–æ—Ä–æ—à–æ, —è –±—É–¥—É –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±—è {html.bold(message.text)}!')

        await message.answer(
            f'{html.bold("–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ - 08.09.1994")}\n\n'
            '–ú–Ω–µ –Ω—É–∂–Ω–∞ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n\n'
            f'–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞—Ç—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {html.code(0)}',
        )
        await state.set_state(CreateUser.birth_date)


@router.message(CreateUser.birth_date)
async def get_birth_date(message: types.Message, state: FSMContext):
    text = message.text.strip()

    if text == "0":
        birth_date = date.today() - timedelta(days=365*17)
        await state.update_data(birth_date=birth_date)
        await message.answer(f"–ó–∞–ø–æ–º–Ω–∏–ª! –¢–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî {birth_date.strftime('%d.%m.%Y')}.")
    else:
        text = re.sub(r'[-/,]', '.', text)

        parts = text.split('.')
        if len(parts) != 3:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return

        day, month, year = parts

        if len(day) == 1 and day.isdigit():
            day = '0' + day
        if len(month) == 1 and month.isdigit():
            month = '0' + month

        if not (year.isdigit() and len(year) == 4):
            await message.answer("–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ 4 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä 1994")
            return

        try:
            birth_date = datetime.strptime(f"{day}.{month}.{year}", "%d.%m.%Y").date()
        except ValueError:
            await message.answer("–ü–æ—Ö–æ–∂–µ, –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return

        await state.update_data(birth_date=birth_date)
        await message.answer(f"–ó–∞–ø–æ–º–Ω–∏–ª! –¢–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî {birth_date.strftime('%d.%m.%Y')}.")

    await message.answer(
        f'{html.bold("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 9237835676")}\n\n'
        '–û–±–µ—â–∞—é –Ω–∏–∫–æ–≥–¥–∞ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—Å–∞—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä\n'
        '–û–Ω –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, —á—Ç–æ –±—ã —Ç—ã –º–æ–≥ –≤–æ–π—Ç–∏ —Å –ª—é–±–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º'
    )
    await state.set_state(CreateUser.phone)


@router.message(CreateUser.phone)
async def get_phone(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 9237835676')
        return

    phone = message.text
    await state.update_data(phone=phone)

    await message.answer(f"–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä: {phone}")
    await message.answer(
        '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏—è, –µ—â–µ –ø–∞—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤!'
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞—é—Ç—Å—è \n\n'
        '–í–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
    )

    await state.set_state(CreateUser.interests)


@router.message(CreateUser.phone)
async def get_phone(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 9237835676')
        return

    phone = message.text
    await state.update_data(phone=phone)

    await message.answer(f"–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä: {phone}")
    await message.answer(
        '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏—è, –µ—â–µ –ø–∞—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤!'
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞—é—Ç—Å—è \n\n'
        '–í–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
    )

    await state.set_state(CreateUser.interests)


@router.message(CreateUser.interests)
async def get_interests(message: Message, state: FSMContext):
    if not message.text:
        await message.answer('–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!')
        return

    interests = [i.strip() for i in message.text.lower().split(',') if i.strip()]
    await state.update_data(interests=interests)

    await state.set_state(CreateUser.tz)  # üëâ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:\n\n"
        "–ï—Å–ª–∏ —Ç—ã –Ω–µ —É–≤–µ—Ä–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥.",
        reply_markup=timezone_keyboard()
    )

    # data = await state.get_data()
    #
    # pilgrim['username'] = data['username']
    # pilgrim['birth_date'] = data['birth_date']
    # pilgrim['phone'] = data['phone']
    # pilgrim['interests'] = data['interests']
    #
    # try:
    #     async with SessionLocal() as db:  # ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    #         user = await create_user(
    #             db,
    #             username=data['username'],
    #             birth_date=data['birth_date'],
    #             phone=data['phone'],
    #             interests=data['interests'],
    #             telegram_id=str(message.from_user.id)
    #         )
    #         await message.answer(
    #             '–°–ø–∞—Å–∏–±–æ! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º:\n\n'
    #             f'–¢—ã: {user.username}\n'
    #             f'–î–∞—Ç–∞: {user.birth_date}\n'
    #             f'–¢–≤–æ–π –Ω–æ–º–µ—Ä: {user.phone}\n'
    #             f'–ò–Ω—Ç–µ—Ä–µ—Å—ã: {", ".join(user.interests)}'
    #         )
    # except Exception as e:
    #     await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}')
    #
    # await state.clear()